name: Java CI/CD with Docker

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  # 🔹 Job 1: Lint
  lint:
    name: 🔎 Lint (Checkstyle)
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: 📦 Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven
          mvn --version

      - name: 🔍 Run Checkstyle
        run: mvn checkstyle:check

  # 🔹 Job 2: Tests + Coverage (≥90%)
  test:
    name: 🧪 Tests + Coverage
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: 📦 Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven
          mvn --version

      - name: 🧪 Run Tests with Coverage
        run: mvn clean verify

      - name: 📊 Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/

      - name: 📈 Coverage Summary
        run: |
          if [ -f target/site/jacoco/index.html ]; then
            echo "✅ Coverage report generated successfully"
            echo "📊 Check coverage in artifacts"
          else
            echo "❌ Coverage report not found"
            exit 1
          fi

  # 🔹 Job 3: Build
  build:
    name: 📦 Build JAR
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: 📦 Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven
          mvn --version

      - name: 📦 Build JAR
        run: mvn clean package -DskipTests

      - name: 📤 Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  # 🔹 Job 4: Docker
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test]
    if: success()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: 📦 Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven
          mvn --version

      - name: 📦 Build JAR for Docker
        run: mvn clean package -DskipTests

      - name: 🐳 Build Docker Image
        run: |
          docker build -t mini-banco:latest .
          echo "✅ Docker image built successfully"

      - name: 🧪 Test Docker Container
        run: |
          echo "🚀 Testing Docker container..."
          
          # Ejecutar contenedor en background
          docker run -d --name test-container -p 8080:8080 mini-banco:latest
          
          # Esperar que el contenedor inicie
          echo "⏳ Waiting for container to start..."
          sleep 10
          
          # Verificar que el contenedor está corriendo
          if docker ps | grep -q "test-container"; then
            echo "✅ Container is running successfully"
          
            # Mostrar logs del contenedor
            echo "📝 Container logs:"
            docker logs test-container
          
          else
            echo "❌ Container failed to start"
            docker logs test-container
            exit 1
          fi

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker stop test-container || true
          docker rm test-container || true

  # 🔹 Job 5: Deploy Info
  deploy-info:
    name: 🚀 Deploy Info
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: success()
    steps:
      - name: 🎉 Deployment Ready
        run: |
          echo "🎉 All checks passed!"
          echo "✅ Linting: OK"
          echo "✅ Tests: OK (Coverage ≥90%)"
          echo "✅ Build: OK"
          echo "✅ Docker: OK"
          echo "🚀 Application is ready for deployment!"